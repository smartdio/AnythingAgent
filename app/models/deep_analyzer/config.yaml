# Deep Analyzer 模型配置

# 模型基本信息
model_info:
  name: "Deep Analyzer"
  version: "0.1.0"
  description: "基于Agent框架实现的高级分析模型，能够深入分析用户消息和系统消息，判断信息是否足够，并根据分析结果进行任务分解和执行。"

# LLM配置
llm:
  # 默认LLM配置
  default:
    provider: "ollama"  # 可选: openai, anthropic, ollama, azure, etc.
    model: "qwen2.5:72b"      # 模型名称
    temperature: 0.5    # 温度参数
    api_key: ""         # API密钥，留空则从环境变量读取
    api_base: "http://211.137.102.69:58001"        # API基础URL，留空则从环境变量读取
  
  # 备选LLM配置
  alternatives:
    # Anthropic Claude配置
    claude:
      provider: "anthropic"
      model: "claude-3-opus-20240229"
      temperature: 0.5
      api_key: ""
      api_base: ""
    
    # Ollama本地模型配置
    ollama:
      provider: "ollama"
      model: "llama3"
      base_url: "http://localhost:11434"
      temperature: 0.8

# agent配置
agent:
  # Analyzer Agent配置
  analyzer_agent:
    role: "信息分析专家"
    goal: "分析用户消息和系统消息，判断信息是否足够"
    backstory: "你是一个专业的信息分析专家，能够深入理解用户需求，判断提供的信息是否足够执行任务。"
  
  # Planner Agent配置
  planner_agent:
    role: "任务规划专家"
    goal: "根据用户需求分解任务计划"
    backstory: "你是一个专业的任务规划专家，能够将复杂任务分解为可执行的子任务。"
  
  # Worker Agent配置
  worker_agent:
    role: "任务执行专家"
    goal: "执行具体任务并返回结果"
    backstory: "你是一个专业的任务执行专家，能够高效准确地完成各种任务。"

# 任务模板
task_templates:
  # 分析任务模板
  analyze_task:
    description: |
      分析以下用户消息和系统消息，判断信息是否足够执行任务：
      
      {history_context}
      用户消息：
      {user_message}
      
      系统消息：
      {system_message}
      
      如果用户提供的信息很少，或者没有提供任何实质性的内容，不要返回 'NEXT-AGENT'，依然还是由你来继续回答用户的问题。并回复引导用户提供更多有价值的信息。
      如果用户提供的信息足够,你确认是一段需要进行专业分析的内容，返回 'NEXT-AGENT'，否则返回需要用户提供的具体信息。
      如果用户多次对话后都还没能提供足够的信息，你自己帮助用户补充建议，然后可以在信息缺失的情况下返回 'NEXT-AGENT'。
  
  # 规划任务模板
  planning_task:
    description: |
      根据以下用户需求，分解任务计划：
      
      {history_context}
      用户需求：
      {user_message}
      
      请将任务分解为具体的子任务，并以JSON格式返回。每个任务必须包含title和prompt两个字段，例如：
      
      {{
        "task1": {{
          "title": "任务标题1",
          "prompt": "任务描述1"
        }},
        "task2": {{
          "title": "任务标题2",
          "prompt": "任务描述2"
        }}
      }}
      
      注意：每个任务必须同时包含title和prompt字段，否则将无法正确执行。
  
  # 执行任务模板
  execution_task:
    description: |
      执行以下任务并返回结果：
      
      {history_context}
      任务标题: {task_title}
      任务描述: {task_prompt}

# 向量存储配置
vector_store:
  enabled: true
  metadata:
    type: "deep_analyzer"
    capabilities: ["message_analysis", "task_planning", "task_execution"] 